name: Generate Code from Issue Requirements

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]

jobs:
  generate_code:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract Issue Content and Trigger Check
        id: extract_issue_content
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          COMMENT_BODY="${{ github.event.comment.body }}"
          EVENT_NAME="${{ github.event_name }}"

          TRIGGER_GENERATE="false"

          if [ "$EVENT_NAME" == "issues" ]; then
            # Check for a specific label, e.g., 'generate-code'
            LABELS=$(echo '${{ toJSON(github.event.issue.labels) }}' | jq -r '.[].name')
            if echo "$LABELS" | grep -q "generate-code"; then
              TRIGGER_GENERATE="true"
            fi
          elif [ "$EVENT_NAME" == "issue_comment" ]; then
            # Check for a specific command in the comment body, e.g., '/generate'
            if echo "$COMMENT_BODY" | grep -q "/generate"; then
              TRIGGER_GENERATE="true"
            fi
          fi

          echo "trigger_generate=$TRIGGER_GENERATE" >> "$GITHUB_OUTPUT"
          echo "issue_title=$ISSUE_TITLE" >> "$GITHUB_OUTPUT"
          echo "issue_body=$ISSUE_BODY" >> "$GITHUB_OUTPUT"
          echo "comment_body=$COMMENT_BODY" >> "$GITHUB_OUTPUT"

      - name: Generate Code with Claude AI
        if: steps.extract_issue_content.outputs.trigger_generate == 'true'
        id: claude_generate
        uses: anthropics/claude-code-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Generate code based on the following GitHub Issue requirements:
            Issue Title: ${{ steps.extract_issue_content.outputs.issue_title }}
            Issue Body: ${{ steps.extract_issue_content.outputs.issue_body }}
            ${{ github.event_name == 'issue_comment' && format('The user has also provided a comment: {0}', steps.extract_issue_content.outputs.comment_body) || '' }}
            Please provide the code in a markdown code block, and specify the suggested file path and name at the beginning of the response.
            Example: `path/to/file.py`
            ```python
            # Generated code here
            ```

      - name: Parse Claude Output and Write File
        if: success() && steps.claude_generate.outputs.response != ''
        id: parse_output
        run: |
          CLAUDE_RESPONSE="${{ steps.claude_generate.outputs.response }}"
          echo "$CLAUDE_RESPONSE"

          # Extract file path from the first line (e.g., `path/to/file.py`)
          FILE_PATH=$(echo "$CLAUDE_RESPONSE" | head -n 1 | sed -e 's/^`\([^`]*\)`$/\1/')
          if [[ ! "$FILE_PATH" =~ ^[a-zA-Z0-9_\/\.\-]+$ ]]; then
            echo "Error: Invalid file path extracted: $FILE_PATH"
            exit 1
          fi

          # Extract code block (assuming it's the last markdown code block)
          CODE_CONTENT=$(echo "$CLAUDE_RESPONSE" | awk '/^```/{flag=!flag;next}flag')

          if [ -z "$FILE_PATH" ] || [ -z "$CODE_CONTENT" ]; then
            echo "Error: Could not extract file path or code content."
            exit 1
          fi

          echo "Extracted File Path: $FILE_PATH"
          echo "Extracted Code Content (first 50 chars): ${CODE_CONTENT:0:50}"

          mkdir -p "$(dirname "$FILE_PATH")"
          echo "$CODE_CONTENT" > "$FILE_PATH"
          echo "generated_file_path=$FILE_PATH" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request with Generated Code
        if: success() && steps.parse_output.outputs.generated_file_path != ''
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Generated code from Issue #${{ github.event.issue.number }}"
          branch: "generate-from-issue-${{ github.event.issue.number }}"
          delete-branch: true
          title: "feat: Generated code from Issue #${{ github.event.issue.number }}"
          body: |
            This pull request contains code generated automatically from Issue #${{ github.event.issue.number }}.
            
            **Issue Title:** ${{ github.event.issue.title }}
            
            Please review the changes and merge if acceptable.
            
            [Link to Issue #${{ github.event.issue.number }}](${{ github.event.issue.html_url }})

      - name: Comment on Issue with PR Link
        if: success() && steps.create_pr.outputs.pull-request-url != ''
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Code generation initiated from this issue. A pull request has been created: ${{ steps.create_pr.outputs.pull-request-url }}`
            })

      - name: Handle Generation Failure
        if: failure() && steps.extract_issue_content.outputs.trigger_generate == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Code generation failed for this issue. Please check the workflow logs for details.`
            })
